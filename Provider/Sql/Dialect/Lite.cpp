///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Lite.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Crux Namespace ///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Crux
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Crux::Provider Namespace /////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	namespace Provider
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Crux::Provider::Sql Namespace ////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		namespace Sql
		{
			///////////////////////////////////////////////////////////////////////////////////////////////////////////
			/// Crux::Provider::Sql::Dialect Namespace ///////////////////////////////////////////////////////////////
			/////////////////////////////////////////////////////////////////////////////////////////////////////////

			namespace Dialect
			{

				///////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Factory //////////////////////////////////////////////////////////////////////////////////////////
				/////////////////////////////////////////////////////////////////////////////////////////////////////

				Lite *Lite::Factory(QString strName, QString strDatabase) {
					// Return the new instance
					return new Lite(strName, strDatabase);
				}

				///////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Constructor //////////////////////////////////////////////////////////////////////////////////////
				/////////////////////////////////////////////////////////////////////////////////////////////////////

				Lite::Lite(QString strName, QString strDatabase) {
					// Set the driver into the instance
					this->setDriver(Driver::SQLite);
					// Set the database name into the instance
					this->setDatabase(strDatabase);
					// Set the connection name into the instance
					this->setName(strName);
					// Establish the connection
					this->connect();
				}

				///////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Implementations //////////////////////////////////////////////////////////////////////////////////
				/////////////////////////////////////////////////////////////////////////////////////////////////////

				QMap<QString, QVector<QString>> Lite::describe(QString strTable, QString strSchema) {
					// Define the description container
					QMap<QString, QVector<QString>> mapDescription;
					// Grab a new query
					QSqlQuery *qsqDescription = this->newQuery();
					// We only want to traverse forward in the result set
					qsqDescription->setForwardOnly(true);
					// Try to execute the query
					if (!qsqDescription->exec(this->queryf("PRAGMA table_info(%s)", strTable))) {
						// TODO - Emit Error Signal
						// We're done, return the empty map
						return mapDescription;
					}
					// Iterate over the query results
					while (qsqDescription->next()) {
						// Define our column vector
						QVector<QString> vecColumn;
						// Add the column's data type
						vecColumn.append(qsqDescription->value("type").toString());
						// Add the maximum length
						vecColumn.append("255");
						// Check to see if this column is the primary key
						if (qsqDescription->value("pk").toInt() == 1) {
							// Append the primary key value
							vecColumn.append("PRI");
						}
						// Set the column into the table description container
						mapDescription.insert(qsqDescription->value("name").toString(), vecColumn);
					}
					// We're done with the query, close it
					qsqDescription->finish();
					// We're done, the table's description has been loaded
					return mapDescription;
				}

				QString Lite::escapeColumn(QString strColumn) {
					// Return the quoted column
					return QString("\"%1\"").arg(strColumn);
				}

				QString Lite::escapeTable(QString strTable) {
					// Return the quoted table and schema
					return QString("\"%1\"").arg(strTable);
				}

				QString Lite::escapeValue(QVariant varValue) {
					// Determine the type
					if (static_cast<enum QMetaType::Type>(varValue.type()) == QMetaType::Int) {                  // Integer
						// We're done, return the string
						return QString::number(varValue.toInt());
					} else if (static_cast<enum QMetaType::Type>(varValue.type()) == QMetaType::Double) {        // Double Point
						// We're done, return the string
						return QString::number(varValue.toDouble());
					} else if (static_cast<enum QMetaType::Type>(varValue.type()) == QMetaType::Float) {         // Floating Point
						// We're done, return the string
						return QString::number(varValue.toFloat());
					} else if (static_cast<enum QMetaType::Type>(varValue.type()) == QMetaType::Bool) {          // Boolean
						// We're done, return the string
						return QString(varValue.toBool() ? "1" : "0");
					} else if (static_cast<enum QMetaType::Type>(varValue.type()) == QMetaType::QJsonArray) {    // JSON Array
						// We're done, return the string
						return this->escapeValue(QJsonDocument(varValue.toJsonArray()).toJson());
					} else if (static_cast<enum QMetaType::Type>(varValue.type()) == QMetaType::QJsonDocument) { // JSON Document
						// We're done, return the string
						return this->escapeValue(varValue.toJsonDocument().toJson());
					} else if (static_cast<enum QMetaType::Type>(varValue.type()) == QMetaType::QJsonObject) {   // JSON Object
						// We're done, return the string
						return this->escapeValue(QJsonDocument(varValue.toJsonObject()).toJson());
					} else if (varValue.isNull()) {                                                             // NULL Value
						// We're done, return the string
						return QString("NULL");
					} else {                                                                                    // Strings and Everything Else
						// We're done, return the string
						return QString("'%1'").arg(varValue.toString().replace("'", "''"));
					}
				}

			///////////////////////////////////////////////////////////////////////////////////////////////////////////
			} /// End Crux::Provider::Sql::Dialect Namespace /////////////////////////////////////////////////////////
			/////////////////////////////////////////////////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		} /// End Crux::Provider::Sql Namespace //////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	} /// End Crux::Provider Namespace ///////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} /// End Crux Namespace /////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
