///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Definitions //////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CRUX_GRAMMAR_INFLECTION_HPP
#define CRUX_GRAMMAR_INFLECTION_HPP

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <QtCore/QByteArray>
#include <QtCore/QMap>
#include <QtCore/QObject>
#include <QtCore/QRegularExpression>
#include <QtCore/QString>
#include <QtCore/QStringList>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Crux Namespace ///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Crux
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Crux::Grammar Namespace //////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	namespace Grammar
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Crux::Grammar::Inflection Class Definition ///////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		class Inflection : public QObject
		{
			///////////////////////////////////////////////////////////////////////////////////////////////////////////
			/// Qt Object Recognition ////////////////////////////////////////////////////////////////////////////////
			/////////////////////////////////////////////////////////////////////////////////////////////////////////

			Q_OBJECT

			///////////////////////////////////////////////////////////////////////////////////////////////////////////
			/// Protected Properties & Methods ///////////////////////////////////////////////////////////////////////
			/////////////////////////////////////////////////////////////////////////////////////////////////////////

			protected:

				///////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Properties ///////////////////////////////////////////////////////////////////////////////////////
				/////////////////////////////////////////////////////////////////////////////////////////////////////

				/**
				 * This property contains irregular words that do not follow the normal pattern
				 * @access protected
				 * @name Inflection::mIrregular
				 * @namespace Crux::Grammar
				 * @static
				 * @var QtCore/QMap<QtCore/QString, QtCore/QString>
				 */
				static QMap<QString, QString> mIrregular;

				/**
				 * This property contains the plural PCREs and replacements for words
				 * @access protected
				 * @name Inflection::mPlural
				 * @namespace Crux::Grammar
				 * @static
				 * @var QtCore/QMap<QtCore/QString, QtCore/QString>
				 */
				static QMap<QString, QString> mPlural;

				/**
				 * This property contains the singular PCREs and replacements for words
				 * @access protected
				 * @name Inflection::mSingular
				 * @namespace Crux::Grammar
				 * @static
				 * @var QtCore/QMap<QtCore/QString, QtCore/QString>
				 */
				static QMap<QString, QString> mSingular;

				/**
				 * This property contains words that are the same in both singular and plural form
				 * @access protected
				 * @name Inflection::mUncountable
				 * @namespace Crux::Grammar
				 * @static
				 * @var QtCore/QStringList
				 */
				static QStringList mUncountable;

			///////////////////////////////////////////////////////////////////////////////////////////////////////////
			/// Public Properties & Methods //////////////////////////////////////////////////////////////////////////
			/////////////////////////////////////////////////////////////////////////////////////////////////////////

			public:

				///////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Methods //////////////////////////////////////////////////////////////////////////////////////////
				/////////////////////////////////////////////////////////////////////////////////////////////////////

				/**
				 * This method will pluralize a QString word
				 * @access public
				 * @name Inflection::pluralize()
				 * @namespace Crux::Grammar
				 * @param QtCore/QString strWord
				 * @return QtCore/QString
				 * @static
				 */
				static QString pluralize(QString strWord);

				/**
				 * This method will pluralize a QByteArray word
				 * @access public
				 * @name Inflection::pluralize()
				 * @namespace Crux::Grammar
				 * @param QtCore/QByteArray charWord
				 * @return QtCore/QString
				 * @static
				 */
				static QString pluralize(QByteArray charWord) {
					// Return the primary method
					return Inflection::pluralize(QString::fromLatin1(charWord));
				}

				/**
				 * This method will pluralize a constant char word
				 * @access public
				 * @name Inflection::pluralize()
				 * @namespace Crux::Grammar
				 * @param const char* charWord
				 * @return QtCore/QString
				 * @static
				 */
				static QString pluralize(const char *charWord) {
					// Return the primary method
					return Inflection::pluralize(QString::fromLatin1(charWord));
				}

				/**
				 * This method will singularize a QString word
				 * @access public
				 * @name Inflection::singularize()
				 * @namespace Crux::Grammar
				 * @param QtCore/QString strWord
				 * @return QtCore/QString
				 * @static
				 */
				static QString singularize(QString strWord);

				/**
				 * This method will singularize a QByteArray word
				 * @access public
				 * @name Inflection::singularize()
				 * @namespace Crux::Grammar
				 * @param QtCore/QByteArray charWord
				 * @return QtCore/QString
				 * @static
				 */
				inline static QString singularize(QByteArray charWord) {
					// Return the primary method
					return Inflection::singularize(QString::fromLatin1(charWord));
				}

				/**
				 * This method will singularize a constant char word
				 * @access public
				 * @name Inflection::singularize()
				 * @namespace Crux::Grammar
				 * @param const char* charWord
				 * @return QtCore/QString
				 * @static
				 */
				inline static QString singularize(const char *charWord) {
					// Return the primary method
					return Inflection::singularize(QString::fromLatin1(charWord));
				}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		}; /// End Crux::Grammar::Inflection Class Definition ////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	} /// End Crux::Grammar Namespace ////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} /// End Crux Namespace /////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif /// End Definitions ///////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
